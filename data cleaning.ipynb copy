{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "18eb218d",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import math\n",
    "from scipy.stats import loguniform\n",
    "from statistics import mean\n",
    "from scipy import stats\n",
    "#import scikit_posthocs\n",
    "import warnings \n",
    "\n",
    "from sklearn.model_selection import train_test_split, RepeatedStratifiedKFold, RandomizedSearchCV\n",
    "from sklearn.metrics import classification_report,f1_score\n",
    "from sklearn.impute import SimpleImputer \n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.svm import SVC\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.utils import resample\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "#from scikit_posthocs import posthoc_nemenyi_friedman\n",
    "\n",
    "\n",
    "warnings.filterwarnings(\"ignore\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "a9edc328",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Age</th>\n",
       "      <th>Sex</th>\n",
       "      <th>ChestPainType</th>\n",
       "      <th>RestingBP</th>\n",
       "      <th>Cholesterol</th>\n",
       "      <th>FastingBS</th>\n",
       "      <th>RestingECG</th>\n",
       "      <th>MaxHR</th>\n",
       "      <th>ExerciseAngina</th>\n",
       "      <th>Oldpeak</th>\n",
       "      <th>ST_Slope</th>\n",
       "      <th>HeartDisease</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>40</td>\n",
       "      <td>M</td>\n",
       "      <td>ATA</td>\n",
       "      <td>140</td>\n",
       "      <td>289</td>\n",
       "      <td>0</td>\n",
       "      <td>Normal</td>\n",
       "      <td>172</td>\n",
       "      <td>N</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Up</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>49</td>\n",
       "      <td>F</td>\n",
       "      <td>NAP</td>\n",
       "      <td>160</td>\n",
       "      <td>180</td>\n",
       "      <td>0</td>\n",
       "      <td>Normal</td>\n",
       "      <td>156</td>\n",
       "      <td>N</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Flat</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>37</td>\n",
       "      <td>M</td>\n",
       "      <td>ATA</td>\n",
       "      <td>130</td>\n",
       "      <td>283</td>\n",
       "      <td>0</td>\n",
       "      <td>ST</td>\n",
       "      <td>98</td>\n",
       "      <td>N</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Up</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>48</td>\n",
       "      <td>F</td>\n",
       "      <td>ASY</td>\n",
       "      <td>138</td>\n",
       "      <td>214</td>\n",
       "      <td>0</td>\n",
       "      <td>Normal</td>\n",
       "      <td>108</td>\n",
       "      <td>Y</td>\n",
       "      <td>1.5</td>\n",
       "      <td>Flat</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>54</td>\n",
       "      <td>M</td>\n",
       "      <td>NAP</td>\n",
       "      <td>150</td>\n",
       "      <td>195</td>\n",
       "      <td>0</td>\n",
       "      <td>Normal</td>\n",
       "      <td>122</td>\n",
       "      <td>N</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Up</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>913</th>\n",
       "      <td>45</td>\n",
       "      <td>M</td>\n",
       "      <td>TA</td>\n",
       "      <td>110</td>\n",
       "      <td>264</td>\n",
       "      <td>0</td>\n",
       "      <td>Normal</td>\n",
       "      <td>132</td>\n",
       "      <td>N</td>\n",
       "      <td>1.2</td>\n",
       "      <td>Flat</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>914</th>\n",
       "      <td>68</td>\n",
       "      <td>M</td>\n",
       "      <td>ASY</td>\n",
       "      <td>144</td>\n",
       "      <td>193</td>\n",
       "      <td>1</td>\n",
       "      <td>Normal</td>\n",
       "      <td>141</td>\n",
       "      <td>N</td>\n",
       "      <td>3.4</td>\n",
       "      <td>Flat</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>915</th>\n",
       "      <td>57</td>\n",
       "      <td>M</td>\n",
       "      <td>ASY</td>\n",
       "      <td>130</td>\n",
       "      <td>131</td>\n",
       "      <td>0</td>\n",
       "      <td>Normal</td>\n",
       "      <td>115</td>\n",
       "      <td>Y</td>\n",
       "      <td>1.2</td>\n",
       "      <td>Flat</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>916</th>\n",
       "      <td>57</td>\n",
       "      <td>F</td>\n",
       "      <td>ATA</td>\n",
       "      <td>130</td>\n",
       "      <td>236</td>\n",
       "      <td>0</td>\n",
       "      <td>LVH</td>\n",
       "      <td>174</td>\n",
       "      <td>N</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Flat</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>917</th>\n",
       "      <td>38</td>\n",
       "      <td>M</td>\n",
       "      <td>NAP</td>\n",
       "      <td>138</td>\n",
       "      <td>175</td>\n",
       "      <td>0</td>\n",
       "      <td>Normal</td>\n",
       "      <td>173</td>\n",
       "      <td>N</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Up</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>918 rows Ã— 12 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Age Sex ChestPainType  RestingBP  Cholesterol  FastingBS RestingECG  \\\n",
       "0     40   M           ATA        140          289          0     Normal   \n",
       "1     49   F           NAP        160          180          0     Normal   \n",
       "2     37   M           ATA        130          283          0         ST   \n",
       "3     48   F           ASY        138          214          0     Normal   \n",
       "4     54   M           NAP        150          195          0     Normal   \n",
       "..   ...  ..           ...        ...          ...        ...        ...   \n",
       "913   45   M            TA        110          264          0     Normal   \n",
       "914   68   M           ASY        144          193          1     Normal   \n",
       "915   57   M           ASY        130          131          0     Normal   \n",
       "916   57   F           ATA        130          236          0        LVH   \n",
       "917   38   M           NAP        138          175          0     Normal   \n",
       "\n",
       "     MaxHR ExerciseAngina  Oldpeak ST_Slope  HeartDisease  \n",
       "0      172              N      0.0       Up             0  \n",
       "1      156              N      1.0     Flat             1  \n",
       "2       98              N      0.0       Up             0  \n",
       "3      108              Y      1.5     Flat             1  \n",
       "4      122              N      0.0       Up             0  \n",
       "..     ...            ...      ...      ...           ...  \n",
       "913    132              N      1.2     Flat             1  \n",
       "914    141              N      3.4     Flat             1  \n",
       "915    115              Y      1.2     Flat             1  \n",
       "916    174              N      0.0     Flat             1  \n",
       "917    173              N      0.0       Up             0  \n",
       "\n",
       "[918 rows x 12 columns]"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv('heart.csv')\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "5c47e793",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(918, 12)"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "e25bb3c7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Age                 int64\n",
       "Sex                object\n",
       "ChestPainType      object\n",
       "RestingBP           int64\n",
       "Cholesterol         int64\n",
       "FastingBS           int64\n",
       "RestingECG         object\n",
       "MaxHR               int64\n",
       "ExerciseAngina     object\n",
       "Oldpeak           float64\n",
       "ST_Slope           object\n",
       "HeartDisease        int64\n",
       "dtype: object"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a=df.dtypes\n",
    "a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "adaadf1f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Age</th>\n",
       "      <th>Sex</th>\n",
       "      <th>ChestPainType</th>\n",
       "      <th>RestingBP</th>\n",
       "      <th>Cholesterol</th>\n",
       "      <th>FastingBS</th>\n",
       "      <th>RestingECG</th>\n",
       "      <th>MaxHR</th>\n",
       "      <th>ExerciseAngina</th>\n",
       "      <th>Oldpeak</th>\n",
       "      <th>ST_Slope</th>\n",
       "      <th>HeartDisease</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>40</td>\n",
       "      <td>M</td>\n",
       "      <td>ATA</td>\n",
       "      <td>140</td>\n",
       "      <td>289</td>\n",
       "      <td>0</td>\n",
       "      <td>Normal</td>\n",
       "      <td>172</td>\n",
       "      <td>N</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Up</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>49</td>\n",
       "      <td>F</td>\n",
       "      <td>NAP</td>\n",
       "      <td>160</td>\n",
       "      <td>180</td>\n",
       "      <td>0</td>\n",
       "      <td>Normal</td>\n",
       "      <td>156</td>\n",
       "      <td>N</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Flat</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>37</td>\n",
       "      <td>M</td>\n",
       "      <td>ATA</td>\n",
       "      <td>130</td>\n",
       "      <td>283</td>\n",
       "      <td>0</td>\n",
       "      <td>ST</td>\n",
       "      <td>98</td>\n",
       "      <td>N</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Up</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>48</td>\n",
       "      <td>F</td>\n",
       "      <td>ASY</td>\n",
       "      <td>138</td>\n",
       "      <td>214</td>\n",
       "      <td>0</td>\n",
       "      <td>Normal</td>\n",
       "      <td>108</td>\n",
       "      <td>Y</td>\n",
       "      <td>1.5</td>\n",
       "      <td>Flat</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>54</td>\n",
       "      <td>M</td>\n",
       "      <td>NAP</td>\n",
       "      <td>150</td>\n",
       "      <td>195</td>\n",
       "      <td>0</td>\n",
       "      <td>Normal</td>\n",
       "      <td>122</td>\n",
       "      <td>N</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Up</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>913</th>\n",
       "      <td>45</td>\n",
       "      <td>M</td>\n",
       "      <td>TA</td>\n",
       "      <td>110</td>\n",
       "      <td>264</td>\n",
       "      <td>0</td>\n",
       "      <td>Normal</td>\n",
       "      <td>132</td>\n",
       "      <td>N</td>\n",
       "      <td>1.2</td>\n",
       "      <td>Flat</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>914</th>\n",
       "      <td>68</td>\n",
       "      <td>M</td>\n",
       "      <td>ASY</td>\n",
       "      <td>144</td>\n",
       "      <td>193</td>\n",
       "      <td>1</td>\n",
       "      <td>Normal</td>\n",
       "      <td>141</td>\n",
       "      <td>N</td>\n",
       "      <td>3.4</td>\n",
       "      <td>Flat</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>915</th>\n",
       "      <td>57</td>\n",
       "      <td>M</td>\n",
       "      <td>ASY</td>\n",
       "      <td>130</td>\n",
       "      <td>131</td>\n",
       "      <td>0</td>\n",
       "      <td>Normal</td>\n",
       "      <td>115</td>\n",
       "      <td>Y</td>\n",
       "      <td>1.2</td>\n",
       "      <td>Flat</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>916</th>\n",
       "      <td>57</td>\n",
       "      <td>F</td>\n",
       "      <td>ATA</td>\n",
       "      <td>130</td>\n",
       "      <td>236</td>\n",
       "      <td>0</td>\n",
       "      <td>LVH</td>\n",
       "      <td>174</td>\n",
       "      <td>N</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Flat</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>917</th>\n",
       "      <td>38</td>\n",
       "      <td>M</td>\n",
       "      <td>NAP</td>\n",
       "      <td>138</td>\n",
       "      <td>175</td>\n",
       "      <td>0</td>\n",
       "      <td>Normal</td>\n",
       "      <td>173</td>\n",
       "      <td>N</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Up</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>918 rows Ã— 12 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Age Sex ChestPainType  RestingBP  Cholesterol  FastingBS RestingECG  \\\n",
       "0     40   M           ATA        140          289          0     Normal   \n",
       "1     49   F           NAP        160          180          0     Normal   \n",
       "2     37   M           ATA        130          283          0         ST   \n",
       "3     48   F           ASY        138          214          0     Normal   \n",
       "4     54   M           NAP        150          195          0     Normal   \n",
       "..   ...  ..           ...        ...          ...        ...        ...   \n",
       "913   45   M            TA        110          264          0     Normal   \n",
       "914   68   M           ASY        144          193          1     Normal   \n",
       "915   57   M           ASY        130          131          0     Normal   \n",
       "916   57   F           ATA        130          236          0        LVH   \n",
       "917   38   M           NAP        138          175          0     Normal   \n",
       "\n",
       "     MaxHR ExerciseAngina  Oldpeak ST_Slope  HeartDisease  \n",
       "0      172              N      0.0       Up             0  \n",
       "1      156              N      1.0     Flat             1  \n",
       "2       98              N      0.0       Up             0  \n",
       "3      108              Y      1.5     Flat             1  \n",
       "4      122              N      0.0       Up             0  \n",
       "..     ...            ...      ...      ...           ...  \n",
       "913    132              N      1.2     Flat             1  \n",
       "914    141              N      3.4     Flat             1  \n",
       "915    115              Y      1.2     Flat             1  \n",
       "916    174              N      0.0     Flat             1  \n",
       "917    173              N      0.0       Up             0  \n",
       "\n",
       "[918 rows x 12 columns]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe()\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "f8abef0b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n",
      "2\n",
      "6\n",
      "8\n",
      "10\n",
      "Index(['Sex', 'ChestPainType', 'RestingECG', 'ExerciseAngina', 'ST_Slope',\n",
      "       'FastingBS'],\n",
      "      dtype='object')\n",
      "['RestingBP', 'Cholesterol', 'MaxHR', 'Oldpeak']\n"
     ]
    }
   ],
   "source": [
    "#from the above there is no datatype object that condradicts with the above description\n",
    "\n",
    "# we splitted the dataset based on feature type=categorical and numeric. \n",
    "allFeatures=df.columns[1:len(df.columns)-1]\n",
    "catFeatures=[]\n",
    "for i in range((len(df.columns)-1)):\n",
    "    if df.dtypes[i]=='O':\n",
    "        print(i)\n",
    "        catFeatures.append(i)\n",
    "catFeatures.append(5) #fasting bs is categorical 1: if FastingBS > 120 mg/dl, 0: otherwise\n",
    "\n",
    "catFeatures=df.columns[catFeatures]\n",
    "print(catFeatures)\n",
    "\n",
    "numFeatures= [i for i in allFeatures if not(i in catFeatures)]\n",
    "print(numFeatures)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "26941e23",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>RestingBP</th>\n",
       "      <th>Cholesterol</th>\n",
       "      <th>MaxHR</th>\n",
       "      <th>Oldpeak</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>918.000000</td>\n",
       "      <td>918.000000</td>\n",
       "      <td>918.000000</td>\n",
       "      <td>918.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>132.396514</td>\n",
       "      <td>198.799564</td>\n",
       "      <td>136.809368</td>\n",
       "      <td>0.887364</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>18.514154</td>\n",
       "      <td>109.384145</td>\n",
       "      <td>25.460334</td>\n",
       "      <td>1.066570</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>60.000000</td>\n",
       "      <td>-2.600000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>120.000000</td>\n",
       "      <td>173.250000</td>\n",
       "      <td>120.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>130.000000</td>\n",
       "      <td>223.000000</td>\n",
       "      <td>138.000000</td>\n",
       "      <td>0.600000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>140.000000</td>\n",
       "      <td>267.000000</td>\n",
       "      <td>156.000000</td>\n",
       "      <td>1.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>200.000000</td>\n",
       "      <td>603.000000</td>\n",
       "      <td>202.000000</td>\n",
       "      <td>6.200000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        RestingBP  Cholesterol       MaxHR     Oldpeak\n",
       "count  918.000000   918.000000  918.000000  918.000000\n",
       "mean   132.396514   198.799564  136.809368    0.887364\n",
       "std     18.514154   109.384145   25.460334    1.066570\n",
       "min      0.000000     0.000000   60.000000   -2.600000\n",
       "25%    120.000000   173.250000  120.000000    0.000000\n",
       "50%    130.000000   223.000000  138.000000    0.600000\n",
       "75%    140.000000   267.000000  156.000000    1.500000\n",
       "max    200.000000   603.000000  202.000000    6.200000"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[numFeatures].describe()\n",
    "#get rid of min resting bp or data points that are insignificant.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "bfa19ab6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[449]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "Age                   55\n",
       "Sex                    M\n",
       "ChestPainType        NAP\n",
       "RestingBP              0\n",
       "Cholesterol            0\n",
       "FastingBS              0\n",
       "RestingECG        Normal\n",
       "MaxHR                155\n",
       "ExerciseAngina         N\n",
       "Oldpeak              1.5\n",
       "ST_Slope            Flat\n",
       "HeartDisease           1\n",
       "Name: 449, dtype: object"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "s=0\n",
    "c= np.where(df['RestingBP']==0)\n",
    "print(c[0])\n",
    "df.iloc[449]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "292d560f",
   "metadata": {},
   "outputs": [],
   "source": [
    "df=df.drop(index=449,axis=0) #removed this index because it has resting BP. and Cholestrol zero\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "c06df50d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Age</th>\n",
       "      <th>Sex</th>\n",
       "      <th>ChestPainType</th>\n",
       "      <th>RestingBP</th>\n",
       "      <th>Cholesterol</th>\n",
       "      <th>FastingBS</th>\n",
       "      <th>RestingECG</th>\n",
       "      <th>MaxHR</th>\n",
       "      <th>ExerciseAngina</th>\n",
       "      <th>Oldpeak</th>\n",
       "      <th>ST_Slope</th>\n",
       "      <th>HeartDisease</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>40</td>\n",
       "      <td>M</td>\n",
       "      <td>ATA</td>\n",
       "      <td>140</td>\n",
       "      <td>289</td>\n",
       "      <td>0</td>\n",
       "      <td>Normal</td>\n",
       "      <td>172</td>\n",
       "      <td>N</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Up</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>49</td>\n",
       "      <td>F</td>\n",
       "      <td>NAP</td>\n",
       "      <td>160</td>\n",
       "      <td>180</td>\n",
       "      <td>0</td>\n",
       "      <td>Normal</td>\n",
       "      <td>156</td>\n",
       "      <td>N</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Flat</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>37</td>\n",
       "      <td>M</td>\n",
       "      <td>ATA</td>\n",
       "      <td>130</td>\n",
       "      <td>283</td>\n",
       "      <td>0</td>\n",
       "      <td>ST</td>\n",
       "      <td>98</td>\n",
       "      <td>N</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Up</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>48</td>\n",
       "      <td>F</td>\n",
       "      <td>ASY</td>\n",
       "      <td>138</td>\n",
       "      <td>214</td>\n",
       "      <td>0</td>\n",
       "      <td>Normal</td>\n",
       "      <td>108</td>\n",
       "      <td>Y</td>\n",
       "      <td>1.5</td>\n",
       "      <td>Flat</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>54</td>\n",
       "      <td>M</td>\n",
       "      <td>NAP</td>\n",
       "      <td>150</td>\n",
       "      <td>195</td>\n",
       "      <td>0</td>\n",
       "      <td>Normal</td>\n",
       "      <td>122</td>\n",
       "      <td>N</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Up</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>912</th>\n",
       "      <td>45</td>\n",
       "      <td>M</td>\n",
       "      <td>TA</td>\n",
       "      <td>110</td>\n",
       "      <td>264</td>\n",
       "      <td>0</td>\n",
       "      <td>Normal</td>\n",
       "      <td>132</td>\n",
       "      <td>N</td>\n",
       "      <td>1.2</td>\n",
       "      <td>Flat</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>913</th>\n",
       "      <td>68</td>\n",
       "      <td>M</td>\n",
       "      <td>ASY</td>\n",
       "      <td>144</td>\n",
       "      <td>193</td>\n",
       "      <td>1</td>\n",
       "      <td>Normal</td>\n",
       "      <td>141</td>\n",
       "      <td>N</td>\n",
       "      <td>3.4</td>\n",
       "      <td>Flat</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>914</th>\n",
       "      <td>57</td>\n",
       "      <td>M</td>\n",
       "      <td>ASY</td>\n",
       "      <td>130</td>\n",
       "      <td>131</td>\n",
       "      <td>0</td>\n",
       "      <td>Normal</td>\n",
       "      <td>115</td>\n",
       "      <td>Y</td>\n",
       "      <td>1.2</td>\n",
       "      <td>Flat</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>915</th>\n",
       "      <td>57</td>\n",
       "      <td>F</td>\n",
       "      <td>ATA</td>\n",
       "      <td>130</td>\n",
       "      <td>236</td>\n",
       "      <td>0</td>\n",
       "      <td>LVH</td>\n",
       "      <td>174</td>\n",
       "      <td>N</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Flat</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>916</th>\n",
       "      <td>38</td>\n",
       "      <td>M</td>\n",
       "      <td>NAP</td>\n",
       "      <td>138</td>\n",
       "      <td>175</td>\n",
       "      <td>0</td>\n",
       "      <td>Normal</td>\n",
       "      <td>173</td>\n",
       "      <td>N</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Up</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>917 rows Ã— 12 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Age Sex ChestPainType  RestingBP  Cholesterol  FastingBS RestingECG  \\\n",
       "0     40   M           ATA        140          289          0     Normal   \n",
       "1     49   F           NAP        160          180          0     Normal   \n",
       "2     37   M           ATA        130          283          0         ST   \n",
       "3     48   F           ASY        138          214          0     Normal   \n",
       "4     54   M           NAP        150          195          0     Normal   \n",
       "..   ...  ..           ...        ...          ...        ...        ...   \n",
       "912   45   M            TA        110          264          0     Normal   \n",
       "913   68   M           ASY        144          193          1     Normal   \n",
       "914   57   M           ASY        130          131          0     Normal   \n",
       "915   57   F           ATA        130          236          0        LVH   \n",
       "916   38   M           NAP        138          175          0     Normal   \n",
       "\n",
       "     MaxHR ExerciseAngina  Oldpeak ST_Slope  HeartDisease  \n",
       "0      172              N      0.0       Up             0  \n",
       "1      156              N      1.0     Flat             1  \n",
       "2       98              N      0.0       Up             0  \n",
       "3      108              Y      1.5     Flat             1  \n",
       "4      122              N      0.0       Up             0  \n",
       "..     ...            ...      ...      ...           ...  \n",
       "912    132              N      1.2     Flat             1  \n",
       "913    141              N      3.4     Flat             1  \n",
       "914    115              Y      1.2     Flat             1  \n",
       "915    174              N      0.0     Flat             1  \n",
       "916    173              N      0.0       Up             0  \n",
       "\n",
       "[917 rows x 12 columns]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df=df.reset_index()\n",
    "df=df.drop(['index'],axis=1)\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "51a589eb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[<AxesSubplot:title={'center':'RestingBP'}>,\n",
       "        <AxesSubplot:title={'center':'Cholesterol'}>],\n",
       "       [<AxesSubplot:title={'center':'MaxHR'}>,\n",
       "        <AxesSubplot:title={'center':'Oldpeak'}>]], dtype=object)"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x360 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.rcParams[\"figure.figsize\"] = [8, 5]\n",
    "plt.rcParams[\"figure.autolayout\"] = True\n",
    "df[numFeatures].hist()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "382ea99d",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 576x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 576x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAjgAAAFgCAYAAAC2QAPxAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjMuNCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8QVMy6AAAACXBIWXMAAAsTAAALEwEAmpwYAAAWYUlEQVR4nO3dfbBtZX0f8O/PC4IKBAhXSwC96GBazBiMSFM10UgaUYk4JkSMpviSMq20JmmdCNWJppYJ1SSaZMoktGJQG5GOWqkvMZYUX2oUL2pEJERGEG5g4KKoaBoS8Nc/zrrJ8Xpf9n3ZZ5/znM9nZs/e69lr7fu9M4fL9zzrWXtVdwcAYCQPWHQAAID9TcEBAIaj4AAAw1FwAIDhKDgAwHAOWHSAfXHUUUf1pk2bFh0DAFiQa6655q7u3rj9+JouOJs2bcrmzZsXHQMAWJCq+sqOxp2iAgCGo+AAAMNRcACA4Sg4AMBwFBwAYDgKDgAwHAUHABiOggMADEfBAQCGo+AAAMNRcACA4Sg4AMBw1vTNNteSTee9f9ERhnTzhc9adAQAViEzOADAcBQcAGA4Cg4AMBwFBwAYjoIDAAxHwQEAhqPgAADDUXAAgOEoOADAcBQcAGA4Cg4AMBwFBwAYjoIDAAxHwQEAhqPgAADDUXAAgOEoOADAcBQcAGA4Cg4AMBwFBwAYjoIDAAxHwQEAhqPgAADDUXAAgOEoOADAcBQcAGA4Cg4AMBwFBwAYjoIDAAxHwQEAhqPgAADDmXvBqaoNVfXZqnrftH1kVX24qr40PR+xbN/zq+rGqrqhqp4+72wAwJhWYgbnl5Jcv2z7vCRXdvcJSa6ctlNVJyY5K8ljkpyW5KKq2rAC+QCAwcy14FTVsUmeleS/LRs+I8ml0+tLkzxn2fhl3X1vd9+U5MYkp8wzHwAwpnnP4Lwpya8m+c6ysYd19+1JMj0/dBo/Jsmty/bbMo19l6o6p6o2V9XmrVu3ziU0ALC2za3gVNXpSe7s7mtmPWQHY/09A90Xd/fJ3X3yxo0b9ykjADCmA+b42U9K8uyqemaSg5McVlVvT3JHVR3d3bdX1dFJ7pz235LkuGXHH5vktjnmAwAGNbeC093nJzk/SarqqUle0d0vrKo3JDk7yYXT83unQ65I8kdV9dtJfiDJCUmunlc+YOc2nff+RUcYzs0XPmvREWBdmecMzs5cmOTyqnppkluSnJkk3X1dVV2e5ItJ7ktybnffv4B8AMAatyIFp7uvSnLV9PqrSU7dyX4XJLlgJTIBAOPyTcYAwHAUHABgOAoOADAcBQcAGI6CAwAMR8EBAIaj4AAAw1FwAIDhKDgAwHAUHABgOAoOADAcBQcAGI6CAwAMR8EBAIaj4AAAw1FwAIDhKDgAwHAUHABgOAoOADAcBQcAGI6CAwAMR8EBAIaj4AAAw1FwAIDhKDgAwHAUHABgOAoOADAcBQcAGI6CAwAMR8EBAIaj4AAAw1FwAIDhKDgAwHAUHABgOAoOADAcBQcAGI6CAwAMR8EBAIaj4AAAw1FwAIDhKDgAwHAUHABgOAoOADAcBQcAGI6CAwAMR8EBAIaj4AAAw1FwAIDhKDgAwHAUHABgOAoOADCcuRWcqjq4qq6uqj+vquuq6ten8SOr6sNV9aXp+Yhlx5xfVTdW1Q1V9fR5ZQMAxjbPGZx7kzytu384yUlJTquqH01yXpIru/uEJFdO26mqE5OcleQxSU5LclFVbZhjPgBgUHMrOL3kW9PmgdOjk5yR5NJp/NIkz5len5Hksu6+t7tvSnJjklPmlQ8AGNdc1+BU1Yaq+lySO5N8uLs/leRh3X17kkzPD512PybJrcsO3zKNbf+Z51TV5qravHXr1nnGBwDWqLkWnO6+v7tPSnJsklOq6od2sXvt6CN28JkXd/fJ3X3yxo0b91NSAGAkK3IVVXd/PclVWVpbc0dVHZ0k0/Od025bkhy37LBjk9y2EvkAgLHM8yqqjVV1+PT6QUl+MslfJLkiydnTbmcnee/0+ookZ1XVQVV1fJITklw9r3wAwLgOmONnH53k0ulKqAckuby731dVf5bk8qp6aZJbkpyZJN19XVVdnuSLSe5Lcm533z/HfADAoOZWcLr780ket4PxryY5dSfHXJDkgnllAgDWB99kDAAMR8EBAIaj4AAAw1FwAIDhKDgAwHAUHABgOAoOADCc3Rac6caW51bVESsRCABgX80yg3NWkh9I8umquqyqnl5VO7oxJgDAqrDbgtPdN3b3q5I8OskfJbkkyS1V9etVdeS8AwIA7KmZ1uBU1WOT/FaSNyR5V5KfTfLNJH86v2gAAHtnt/eiqqprknw9yZuTnNfd905vfaqqnjTHbAAAe2WWm22e2d1f3tEb3f3c/ZwHAGCfzXKK6her6vBtG1V1RFX9p/lFAgDYN7MUnGd099e3bXT33UmeObdEAAD7aJaCs6GqDtq2UVUPSnLQLvYHAFioWdbgvD3JlVX1liSd5CVJLp1rKgCAfbDbgtPdr6+qa5OcmqSSvK67PzT3ZAAAe2mWGZx09weTfHDOWQAA9otZ7kX13Kr6UlV9o6q+WVX3VNU3VyIcAMDemGUG5/VJfrq7r593GACA/WGWq6juUG4AgLVklhmczVX1ziT/M8m22zSku989r1AAAPtiloJzWJK/TvJTy8Y6iYIDAKxKs1wm/uKVCAIAsL/MchXVo6vqyqr6wrT92Kp69fyjAQDsnVkWGf/XJOcn+bsk6e7PJzlrnqEAAPbFLAXnwd199XZj980jDADA/jBLwbmrqh6VpYXFqaqfTXL7XFMBAOyDWa6iOjfJxUn+cVX9VZKbkrxwrqkAAPbBLFdRfTnJT1bVQ5I8oLvvmX8sAIC9t9uCU1W/tt12kqS7/+OcMgEA7JNZTlF9e9nrg5OcnsStGwCAVWuWU1S/tXy7qn4zyRVzSwQAsI9muYpqew9O8sj9HQQAYH+ZZQ3OtZkuEU+yIcnGJNbfAACr1ixrcE5f9vq+JHd0ty/6AwBWrVkKzvaXhR+27UqqJOnur+3XRAAA+2iWgvOZJMcluTtJJTk8yS3Tex3rcQCAVWaWRcZ/nOSnu/uo7v7+LJ2yend3H9/dyg0AsOrMUnCe0N0f2LbR3R9M8pT5RQIA2DeznKK6q6peneTtWTol9cIkX51rKgCAfTDLDM7zs3Rp+Humx8ZpDABgVZrlm4y/luSXquqQ7v7WCmQCANgnu53BqaonVtUXk3xx2v7hqrpo7skAAPbSLKeo3pjk6ZnW3XT3nyf58XmGAgDYFzPdi6q7b91u6P45ZAEA2C9muYrq1qp6YpKuqgcmeXmS6+cbCwBg780yg/Ovkpyb5JgkW5KcNG0DAKxKu5zBqaoNSd7U3S9YoTwAAPtslzM43X1/ko3TqSkAgDVhljU4Nyf5v1V1RZJvbxvs7t/e1UFVdVyStyb5R0m+k+Ti7v6dqjoyyTuTbJo+++e6++7pmPOTvDRLi5hf3t0f2sO/DwDAzmdwqupt08vnJXnftO+hyx67c1+Sf9/d/yTJjyY5t6pOTHJekiu7+4QkV07bmd47K8ljkpyW5KLpFBkAwB7Z1QzO46vqEUluSfJ7e/rB3X17ktun1/dU1fVZWqh8RpKnTrtdmuSqJK+cxi/r7nuT3FRVNyY5Jcmf7emfDQCsb7sqOL+f5I+THJ9k87LxytJNNx856x9SVZuSPC7Jp5I8bCo/6e7bq+qh027HJPnkssO2TGPbf9Y5Sc5Jkoc//OGzRgAA1pGdnqLq7t+dTi+9pbsfuexxfHfvSbk5JMm7kvxyd39zV7vuKMYOcl3c3Sd398kbN26cNQYAsI7s9ntwuvtf7+2HV9WBWSo3/7273z0N31FVR0/vH53kzml8S5Ljlh1+bJLb9vbPBgDWr5lu1bA3qqqSvDnJ9dtdcXVFkrOn12cnee+y8bOq6qCqOj7JCUmunlc+AGBcs1wmvreelOQXklxbVZ+bxv5DkguTXF5VL83SAuYzk6S7r6uqy7N01/L7kpw7fQ8PAMAemVvB6e6PZ8frapLk1J0cc0GSC+aVCQBYH+Z2igoAYFEUHABgOAoOADAcBQcAGI6CAwAMR8EBAIaj4AAAw1FwAIDhKDgAwHAUHABgOAoOADAcBQcAGI6CAwAMR8EBAIaj4AAAw1FwAIDhKDgAwHAUHABgOAoOADAcBQcAGI6CAwAMR8EBAIaj4AAAw1FwAIDhKDgAwHAUHABgOAoOADAcBQcAGI6CAwAMR8EBAIaj4AAAw1FwAIDhKDgAwHAUHABgOAoOADAcBQcAGI6CAwAMR8EBAIaj4AAAw1FwAIDhKDgAwHAUHABgOAoOADAcBQcAGI6CAwAMR8EBAIaj4AAAw1FwAIDhKDgAwHAUHABgOAoOADCcuRWcqrqkqu6sqi8sGzuyqj5cVV+ano9Y9t75VXVjVd1QVU+fVy4AYHzznMH5wySnbTd2XpIru/uEJFdO26mqE5OcleQx0zEXVdWGOWYDAAY2t4LT3R9N8rXths9Icun0+tIkz1k2fll339vdNyW5Mckp88oGAIxtpdfgPKy7b0+S6fmh0/gxSW5dtt+Waex7VNU5VbW5qjZv3bp1rmEBgLVptSwyrh2M9Y527O6Lu/vk7j5548aNc44FAKxFK11w7qiqo5Nker5zGt+S5Lhl+x2b5LYVzgYADGKlC84VSc6eXp+d5L3Lxs+qqoOq6vgkJyS5eoWzAQCDOGBeH1xV70jy1CRHVdWWJK9JcmGSy6vqpUluSXJmknT3dVV1eZIvJrkvybndff+8sgEAY5tbwenu5+/krVN3sv8FSS6YVx4AYP1YLYuMAQD2GwUHABiOggMADEfBAQCGo+AAAMNRcACA4Sg4AMBwFBwAYDgKDgAwHAUHABiOggMADEfBAQCGo+AAAMNRcACA4Sg4AMBwFBwAYDgHLDoAAOytTee9f9ERhnTzhc9adIR9ZgYHABiOggMADEfBAQCGo+AAAMNRcACA4Sg4AMBwFBwAYDgKDgAwHAUHABiOggMADEfBAQCGo+AAAMNRcACA4Sg4AMBwFBwAYDgKDgAwHAUHABiOggMADEfBAQCGo+AAAMNRcACA4Sg4AMBwFBwAYDgKDgAwHAUHABiOggMADEfBAQCGo+AAAMNRcACA4Sg4AMBwFBwAYDgKDgAwHAUHABjOqis4VXVaVd1QVTdW1XmLzgMArD2rquBU1YYk/yXJM5KcmOT5VXXiYlMBAGvNqio4SU5JcmN3f7m7/zbJZUnOWHAmAGCNWW0F55gkty7b3jKNAQDM7IBFB9hO7WCsv2uHqnOSnDNtfquqbph7qvXnqCR3LTrELOo/LzoBC+ZnlbXEz+t8PGJHg6ut4GxJctyy7WOT3LZ8h+6+OMnFKxlqvamqzd198qJzwO74WWUt8fO6slbbKapPJzmhqo6vqgcmOSvJFQvOBACsMatqBqe776uqf5PkQ0k2JLmku69bcCwAYI1ZVQUnSbr7A0k+sOgc65xTgKwVflZZS/y8rqDq7t3vBQCwhqy2NTgAAPtMwQEAhqPgAADDUXBIklTVmbOMwWpRVYdV1aGLzgGsThYZkySpqs9094/sbgwWrapOTvKWJIdm6dvPv57kJd19zSJzwc5U1ROTbMqyK5e7+60LC7ROrLrLxFlZVfWMJM9MckxV/e6ytw5Lct9iUsEuXZLkZd39sSSpqidnqfA8dqGpYAeq6m1JHpXkc0nun4Y7iYIzZwoOtyXZnOTZSZb/BnxPkl9ZSCLYtXu2lZsk6e6PV9U9iwwEu3BykhPb6ZIV5xQVSZKqOrC7/27ROWB3quqNSR6c5B1Z+k34eUnuTvKuJOnuzywuHXy3qvofSV7e3bcvOst6o+CQJKmqE5L8RpITkxy8bby7H7mwULADVfV/ppfb/vGqZW93dz9thSPBTk0/rycluTrJvdvGu/vZi8q0XjhFxTZvSfKaJG9M8hNJXpzv/h8HLFRV/bvp5fum506yNcnHu/umxaSC3XrtogOsVy4TZ5sHdfeVWZrV+0p3vzaJ34RZTQ6dHodMj0OztL7hg1V11iKDwS48Kslt3f2R5Y9Fh1oPzOCwzd9U1QOSfGm6o/tfJXnogjPB3+vuX9/ReFUdmeR/J7lsZRPBTDYleWFVPSJLF3J8LMnHuvtziwy1HliDQ5Kkqp6Q5Pokhyd5XZLvS/L67v7kInPBLKrqs939uEXngJ2pqgcl+ZdJXpHkmO7esOBIw1NwgDWtqp6W5NUWF7MaVdWrkzwpS6dVP5vk41mawXFV1Zw5RbXOVdX/yj9cjfI9rPRntaiqa/O9P6tHZum7nP7FyieCmTw3S1+a+v4kH0nyye7+m8VGWh/M4KxzVfWUXb1vMRyrxbSGYblO8tXu/vYi8sCspnumPXl6/FySO7r7yYtNNT4zONzU3bcsOgTsTnd/ZdEZYE9V1Q8l+bEkT8nSVX+3ZmmhMXNmBmedW35Dzap6V3f/zKIzAYyiqt6f5KNZKjWf9o3xK8cMDsu/zM+3FgPsR939rKp6YJJHJ/nBqrpByVkZCg69k9cA7KNpneNbk9ycpV8oj6uqs7v7owsNtg44RbXOVdX9Sb6dpf/wHpTkr7e9laX7+hy2qGwAa11VXZPk57v7hmn70Une0d2PX2yy8ZnBWed82RTAXB24rdwkSXf/ZVUduMhA64WCAwDzs7mq3pzkbdP2C7J0ywbmzCkqAJiTqjooyblZ+g6cytIVVRd1970LDbYOKDgAMEdVtTFJunvrorOsJw9YdAAAGE0teW1V3ZXkL5LcUFVbq+rXFp1tvVBwAGD/++Us3WTzCd39/d19ZJJ/muRJVfUrC022TjhFBQD7WVV9Nsk/7+67thvfmORPuvtxi0m2fpjBAYD978Dty03y9+twXCa+AhQcANj//nYv32M/cYoKAPazZd8S/z1vJTm4u83izJmCAwAMxykqAGA4Cg4AMBwFBwAYjpttAiumql6V5OeT3J/kO0nuTnJEkkOSbExy07Try7r7Ezs4/vQkr8vSL2cHJvmd7v6Dqnptkm9192/O/S8BrAkKDrAiquqfJTk9yY90971VdVSSB3b3bVX11CSv6O7Td3H8gUkuTnJKd2+ZbmK4af7JgbXIKSpgpRyd5K5td1Hu7ru6+7Y9OP7QLP1S9tXp+Hu7+4btd6qqk6rqk1X1+ap6T1UdMY1fVVVvqqpPVNUXquqUafwhVXVJVX26qj5bVWfs618UWDwFB1gpf5LkuKr6y6q6qKqesicHd/fXklyR5CtV9Y6qekFV7ejfsLcmeWV3PzbJtUles+y9h3T3E5O8LMkl09irkvxpdz8hyU8keUNVPWTP/mrAaqPgACuiu7+V5PFJzkmyNck7q+pFe/gZv5jk1CRXJ3lF/qGkJEmq6vuSHN7dH5mGLk3y48t2ecf0OR9NclhVHZ7kp5KcV1WfS3JVkoOTPHxPcgGrjzU4wIrp7vuzVCKuqqprk5yd5A/38DOuTXJtVb0tS4uSX7Qnh+9gu5L8zI5OdwFrlxkcYEVU1Q9W1QnLhk5K8pU9OP6QaTHyTo/v7m8kubuqfmwa+oUkH1m2y/Omz3pykm9M+38oyb+tqprec5dnGIAZHGClHJLk96bTQvcluTFLp6tmVUl+tar+IMn/y9J9fl60g/3OTvL7VfXgJF9O8uJl791dVZ9IcliSl0xjr0vypiSfn0rOzVm62gtYw9yLClgXquqqLF2KvnnRWYD5c4oKABiOGRxg1amq9yQ5frvhV3b3hxaRB1h7FBwAYDhOUQEAw1FwAIDhKDgAwHAUHABgOP8fUu0n69WOSmEAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 576x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "for cat in catFeatures:\n",
    "    fig, ax = plt.subplots()\n",
    "    df[cat].value_counts().plot(ax=ax, kind='bar', xlabel=cat, ylabel='frequency')\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "6575e9b8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Describe for Sex\n",
      "count     917\n",
      "unique      2\n",
      "top         M\n",
      "freq      724\n",
      "Name: Sex, dtype: object\n",
      "Describe for ChestPainType\n",
      "count     917\n",
      "unique      4\n",
      "top       ASY\n",
      "freq      496\n",
      "Name: ChestPainType, dtype: object\n",
      "Describe for RestingECG\n",
      "count        917\n",
      "unique         3\n",
      "top       Normal\n",
      "freq         551\n",
      "Name: RestingECG, dtype: object\n",
      "Describe for ExerciseAngina\n",
      "count     917\n",
      "unique      2\n",
      "top         N\n",
      "freq      546\n",
      "Name: ExerciseAngina, dtype: object\n",
      "Describe for ST_Slope\n",
      "count      917\n",
      "unique       3\n",
      "top       Flat\n",
      "freq       459\n",
      "Name: ST_Slope, dtype: object\n",
      "Describe for FastingBS\n",
      "count    917.000000\n",
      "mean       0.233370\n",
      "std        0.423206\n",
      "min        0.000000\n",
      "25%        0.000000\n",
      "50%        0.000000\n",
      "75%        0.000000\n",
      "max        1.000000\n",
      "Name: FastingBS, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "for i in catFeatures:\n",
    "    a=df[i].describe()\n",
    "    print('Describe for '+ str(i))\n",
    "    print(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "a56313b1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Age               0\n",
       "Sex               0\n",
       "ChestPainType     0\n",
       "RestingBP         0\n",
       "Cholesterol       0\n",
       "FastingBS         0\n",
       "RestingECG        0\n",
       "MaxHR             0\n",
       "ExerciseAngina    0\n",
       "Oldpeak           0\n",
       "ST_Slope          0\n",
       "HeartDisease      0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "bdb1145a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                   Age  RestingBP  Cholesterol  FastingBS     MaxHR   Oldpeak  \\\n",
      "Age           1.000000   0.254399    -0.095282   0.198039 -0.382045  0.258612   \n",
      "RestingBP     0.254399   1.000000     0.100893   0.070193 -0.112135  0.164803   \n",
      "Cholesterol  -0.095282   0.100893     1.000000  -0.260974  0.235792  0.050148   \n",
      "FastingBS     0.198039   0.070193    -0.260974   1.000000 -0.131438  0.052698   \n",
      "MaxHR        -0.382045  -0.112135     0.235792  -0.131438  1.000000 -0.160691   \n",
      "Oldpeak       0.258612   0.164803     0.050148   0.052698 -0.160691  1.000000   \n",
      "HeartDisease  0.282039   0.107589    -0.232741   0.267291 -0.400421  0.403951   \n",
      "\n",
      "              HeartDisease  \n",
      "Age               0.282039  \n",
      "RestingBP         0.107589  \n",
      "Cholesterol      -0.232741  \n",
      "FastingBS         0.267291  \n",
      "MaxHR            -0.400421  \n",
      "Oldpeak           0.403951  \n",
      "HeartDisease      1.000000  \n"
     ]
    }
   ],
   "source": [
    "#Compute Pearson pairwise correlation of features\n",
    "corr_matrix=df.corr()\n",
    "print(corr_matrix)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "88adc69b",
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "The number of FixedLocator locations (7), usually from a call to set_ticks, does not match the number of ticklabels (12).",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-44-20be60d6976d>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0max\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mheatmap\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcorr_matrix\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mcmap\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'coolwarm'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvmin\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvmax\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mannot\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mxticks\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrotation\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m90\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 6\u001b[0;31m \u001b[0max\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset_xticklabels\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      7\u001b[0m \u001b[0max\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset_yticklabels\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshow\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.8/site-packages/matplotlib/axes/_base.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m     61\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     62\u001b[0m         \u001b[0;32mdef\u001b[0m \u001b[0mwrapper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 63\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mget_method\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     64\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     65\u001b[0m         \u001b[0mwrapper\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__module__\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mowner\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__module__\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.8/site-packages/matplotlib/cbook/deprecation.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    449\u001b[0m                 \u001b[0;34m\"parameter will become keyword-only %(removal)s.\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    450\u001b[0m                 name=name, obj_type=f\"parameter of {func.__name__}()\")\n\u001b[0;32m--> 451\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    452\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    453\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mwrapper\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.8/site-packages/matplotlib/axis.py\u001b[0m in \u001b[0;36m_set_ticklabels\u001b[0;34m(self, labels, fontdict, minor, **kwargs)\u001b[0m\n\u001b[1;32m   1794\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mfontdict\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1795\u001b[0m             \u001b[0mkwargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfontdict\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1796\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset_ticklabels\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlabels\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mminor\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mminor\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1797\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1798\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0mcbook\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_make_keyword_only\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"3.2\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"minor\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.8/site-packages/matplotlib/axis.py\u001b[0m in \u001b[0;36mset_ticklabels\u001b[0;34m(self, ticklabels, minor, **kwargs)\u001b[0m\n\u001b[1;32m   1715\u001b[0m             \u001b[0;31m# remove all tick labels, so only error for > 0 ticklabels\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1716\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlocator\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlocs\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mticklabels\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mticklabels\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1717\u001b[0;31m                 raise ValueError(\n\u001b[0m\u001b[1;32m   1718\u001b[0m                     \u001b[0;34m\"The number of FixedLocator locations\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1719\u001b[0m                     \u001b[0;34mf\" ({len(locator.locs)}), usually from a call to\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mValueError\u001b[0m: The number of FixedLocator locations (7), usually from a call to set_ticks, does not match the number of ticklabels (12)."
     ]
    },
    {
     "data": {
      "image/png": "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JDiFCmcAsLOzw6FDh+Di4gIjIyOUl5erMxcREREREREJRCqRqvVH0yhUOJuamiIkJASZmZno3r07li5dCktLS3VnIyIiIiIiIgFIpRK1/mgahQrnyMhItG/fHhs2bIChoSGaN2+O5cuXqzsbERERERERkeAUKpx1dXVhZGSEjIwMJCYmQl9fHz/88IO6sxEREREREZEAOFRbnkL7OM+YMQMFBQW4ceMGHB0dkZaWho4dO6o7GxEREREREZHgFOpxvnjxIjZs2IC+ffvis88+Q2xsLHJyctSdjYiIiIiIiATAHmd5ChXOJiYmEIlEsLGxwcWLF9G8eXOuqk1ERERERERvBIWGardp0wYhISEYNmwYZs2aBbFYDKlU864SEBERERER0ctJNHDla3VSqMc5ODgYbm5uaN26Nfz9/SEWixEZGanubERERERERESCU6jHWVtbGyKRCLGxsfDx8UGDBg3w9ttvqzsbERERERERCUAT5yGrk0I9zuvXr8fXX3+NdevWoaioCIGBgfjxxx/VnY2IiIiIiIhIcAoVztu2bcOPP/4IAwMDNGrUCFu2bEFCQoK6sxEREREREZEApBKJWn80jUJDtbW0tKCrqys71tPTg7a2ttpCERERERERkXA4VFueQoWzk5MTli1bhpKSEqSkpCAuLg5dunRRdzYiIiIiIiIiwSlUOH/xxReIj49H27ZtkZiYiF69emHIkCHqzkZEREREREQCkHI7KjkKD9V2cXHB0KFDkZ6ejkuXLqGiogI6Ogo9nYiIiIiIiEhjKVT5BgUFoby8HJ9++ilmz56Nrl27IiMjAxEREerOR0RERERERK+YhHOc5Si0qvbZs2cRFhaG5ORk+Pj4YPHixbh69aq6sxEREREREREJTqHCubKyEhKJBPv370ePHj1QUlKCkpISdWcjIiIiIiIiAXA7KnkKFc5eXl744IMPYGVlBQcHB/j4+HBxMCIiIiIiInojKDTHefTo0Rg1ahS0tJ7W2T///DMaN26s1mBEREREREQkDO7jLK/GwnnhwoUICQmBn58fRCJRtfs3bNigtmBEREREREREr4MaC+eq4dj+/v6vJAwREREREREJj/s4y6txjrO9vT0AwNjYGPn5+SguLkbTpk3h5OQEJyenVxKQiIiIiIiI6Hm+/vprREVFPfe+srIyzJ49G25ubvD29sbly5cB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\n",
      "text/plain": [
       "<Figure size 1080x576 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Visualize Pearson pairwise correlation of features\n",
    "fig = plt.figure()\n",
    "sns.set(rc = {'figure.figsize':(15,8)})\n",
    "ax = sns.heatmap(corr_matrix,cmap='coolwarm', vmin=-1, vmax=1,annot = True)\n",
    "plt.xticks(rotation=90)\n",
    "ax.set_xticklabels(df.columns)\n",
    "ax.set_yticklabels(df.columns)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f537f855",
   "metadata": {},
   "outputs": [],
   "source": [
    "scalor=StandardScaler()\n",
    "\n",
    "scalor.fit(df)\n",
    "df[numFeatures]=scalor.transform(X_train[numFeatures])\n",
    "df[numFeatures]=scalor.transform(X_test[numFeatures])"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  },
  "latex_envs": {
   "LaTeX_envs_menu_present": true,
   "autoclose": false,
   "autocomplete": true,
   "bibliofile": "biblio.bib",
   "cite_by": "apalike",
   "current_citInitial": 1,
   "eqLabelWithNumbers": true,
   "eqNumInitial": 1,
   "hotkeys": {
    "equation": "Ctrl-E",
    "itemize": "Ctrl-I"
   },
   "labels_anchors": false,
   "latex_user_defs": false,
   "report_style_numbering": false,
   "user_envs_cfg": false
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
